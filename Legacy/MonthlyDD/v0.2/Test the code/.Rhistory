for(i in 1:12) res[i] <- pvonmises(boundaries[i+1], mu = A, kappa = B) - pvonmises(boundaries[i], mu = A, kappa = B)
res
for(i in 1:12) res[i] <- pvonmises(boundaries[i+1], mu = circular(A), kappa = B) - pvonmises(boundaries[i], mu = circular(A), kappa = B)
res
A <- 0
B <- 1
for(i in 1:12) res[i] <- pvonmises(boundaries[i+1], mu = circular(A), kappa = B) - pvonmises(boundaries[i], mu = circular(A), kappa = B)
res
pvonmises(boundaries[13], mu = circular(A), kappa = B)
pvonmises(pi, mu = circular(A), kappa = B)
pvonmises(circular(pi), mu = circular(A), kappa = B)
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("../EstimatingRho.r")
source("../EstimatingRho.r")
source("../EstimatingRho.r")
source("../EstimatingRho.r")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
q()
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("EstimatingRho.r")
read.table("../FixParameters.txt")
Schnute.results.for.TigerPrawn.2par$par
system("cat ../FixParameters.txt")
rec.age
q()
source("SimulatePopDynamic.R")
fixpar
q()
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
fixpar
source("EstimatingRho.r")
source("EstimatingRho.r")
round(Eq114.bis(c(fixpar[3,1],fixpar[1,1]), seq(5,3*12), k=rec.age),5)
source("EstimatingRho.r")
source("PlotTheC++Results.R")
source("EstimatingRho.r")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
rm(failed.minimization)
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
getwd()
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
recruitment.by.month
sum(recruitment.by.month)
precision <- 1e4
res <- rep(NA, 12); 
for(i in 1:12) res[i] <- sum(dvonmises(seq(boundaries[i], boundaries[i+1] - 1 / precision, 1 / precision), A, B))/precision
recruitment.by.month <- res # / sum(res)
recruitment.by.month
sum(recruitment.by.month)
precision <- 1e5
res <- rep(NA, 12); 
for(i in 1:12) res[i] <- sum(dvonmises(seq(boundaries[i], boundaries[i+1] - 1 / precision, 1 / precision), A, B))/precision
recruitment.by.month <- res # / sum(res)
sum(recruitment.by.month)
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
recruitment.by.month
sum(recruitment.by.month)
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
Recruitment
Recruitment[,1]
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
Biomass
rowSums(Biomass)
source("SimulatePopDynamic.R")
rowSums(Biomass)
sim.biomass <- read.csv("Data/SimulatedBiomass.csv")
sim.biomass
source("CompareOutcome.R")
source("CompareOutcome.R")
sim.biomass
read.table("Results/EstimatedFisheriesQuantities.txt")
read.csv("Results/EstimatedFisheriesQuantities.txt")
source("CompareOutcome.R")
est.quantities$EstimatedBiomass
sim.biomass
sim.biomass[,2]
source("CompareOutcome.R")
sim.biomass[1:2,]
est.quantities[1:2,]
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
Nat.mortality
source("CompareOutcome.R")
sim.biomass[1:5,2] * exp(-0.195)
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
Nat.mort
Nat.mortality
Fish.mortality
table(Fish.mortality == 0)
table(Nat.mortality == 0)
Nb.at.age
source("SimulatePopDynamic.R")
Biomass
rowSums(Biomass)
source("CompareOutcome.R")
source("CompareOutcome.R")
[6,] 290807.6  218501
 [7,] 322751.8  397033
[6,] 290807.6  218501
 [7,] 322751.8  397033
397033-218501
(397033-218501)/1e7
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
write.table(file = "Data/SimData1.txt", data.frame(seq(1, 1*12), "SimYear", rep(years, each = 12, 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE))
data.frame(seq(1, 1*12), "SimYear", rep(years, each = 12, 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(file = "Data/SimData1.txt", data.frame(seq(1, 12), "SimYear", rep(years, each = 12), 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE))
write.table(file = "Data/SimData1.txt", data.frame(seq(1, 12), "SimYear", rep(years, each = 12), 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE)
data.frame(seq(1, 12), "SimYear", rep(years, each = 12), 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0)
 data.frame(seq(1, 12), "SimYear", rep(years[1], each = 12), 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0)
write.table(file = "Data/SimData1.txt", data.frame(seq(1, 12), "SimYear", rep(years[1], each = 12), 1:12, rowSums(noisy.Catch)[1:12], Effort[1:12,1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE)
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
fixpar
fixpar <- read.table("../FixParameters.txt")
fixpar
fixpar <- read.table("FixParameters.txt")
fixpar
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
catchability.q
Effort
table(Effort == 0)
Nb.at.age
dim(Nb.at.age)
Nb.at.age[620:660, 1:5]
Recruitment
Recruitment[,1]
recruitment.by.month
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
Recruitment[,1]
Nb.at.age[620:660, 1:5]
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
write.table(file = "Data/SimData1.txt", data.frame(seq(1, 1*12), "SimYear", rep(years, each = length(intra.year.timesteps))[seq(length(rowSums(noisy.Catch)) - 1*12 + 1, length(rowSums(noisy.Catch)))], rep(1:12, 1), rowSums(noisy.Catch)[seq(length(rowSums(noisy.Catch)) - 1*12 + 1, length(rowSums(noisy.Catch)))], Effort[seq(length(rowSums(noisy.Catch)) - 1*12 + 1, length(rowSums(noisy.Catch))),1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE)
length(Biomass)
dim(Biomass)
rowSums(Biomass)
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
Catch
weight.at.ag
weight.at.age
Fish.mortality
Nat.mortality
 Nb.at.age
Weight.at.age
Catch <- Fish.mortality / (Fish.mortality + Nat.mortality) * Nb.at.age * 1e-3 * Weight.at.age * (1 - exp(-(Fish.mortality + Nat.mortality)))
Catch
Catch
?matrix
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
dim(Nb.at.age)
Nb.at.age[649:660,1:3]
Nb.at.age[649:660,1:20]
source("SimulatePopDynamic.R")
Weight.at.age
dim(Weight.at.age)
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
rowSums(Nb.at.age[649:660,] * Weight.at.age[649:660,])
rowSums(Weight.at.age[649:660,])
rowSums(Nb.at.age[649:660,])
Nb.at.age[649:660,]
rowSums(Nb.at.age[649:660,])
source("SimulatePopDynamic.R")
rowSums(Nb.at.age[649:660,])
1e7 * exp(-0.195*36)
1e7 * exp(-0.195*)
1e7 * exp(-0.195*100)
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
c(fixpar[3,1],fixpar[1,1])
rec.age
weight.at.age
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("EstimatingRho.r")
source("EstimatingRho.r")
source("EstimatingRho.r")
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.5), ssq.Eq114.TigerPrawn.2par))
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.2), ssq.Eq114.TigerPrawn.2par))
(Schnute.results.for.TigerPrawn.2par <- optim(c(10, 0.2), ssq.Eq114.TigerPrawn.2par))
(Schnute.results.for.TigerPrawn.2par <- optim(c(10, 1), ssq.Eq114.TigerPrawn.2par))
ssq.Eq114.TigerPrawn.2par <- function(par){ sum((average.weight.at.age[seq(rec.age, 18)] - Eq114.bis(par, seq(rec.age, 18), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.5), ssq.Eq114.TigerPrawn.2par))
ssq.Eq114.TigerPrawn.2par <- function(par){ sum((average.weight.at.age[seq(rec.age, 30)] - Eq114.bis(par, seq(rec.age, 30), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn.2par <- optim(c(10, 0.5), ssq.Eq114.TigerPrawn.2par))
(Schnute.results.for.TigerPrawn.2par <- optim(c(5, 0.5), ssq.Eq114.TigerPrawn.2par))
(Schnute.results.for.TigerPrawn.2par <- optim(c(5, 0.8), ssq.Eq114.TigerPrawn.2par))
(Schnute.results.for.TigerPrawn.2par <- optim(c(5, 0.9), ssq.Eq114.TigerPrawn.2par))
ssq.Eq114.TigerPrawn.2par <- function(par){ sum((average.weight.at.age[seq(rec.age, 18)] - Eq114.bis(par, seq(rec.age, 18), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.5), ssq.Eq114.TigerPrawn.2par))
ssq.Eq114.TigerPrawn.2par <- function(par){ sum((average.weight.at.age[seq(rec.age, 20)] - Eq114.bis(par, seq(rec.age, 20), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.5), ssq.Eq114.TigerPrawn.2par))
ssq.Eq114.TigerPrawn.2par <- function(par){ sum((average.weight.at.age[seq(rec.age, 19)] - Eq114.bis(par, seq(rec.age, 19), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.5), ssq.Eq114.TigerPrawn.2par))
average.weight.at.age
source("EstimatingRho.r")
source("EstimatingRho.r")
source("EstimatingRho.r")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("EstimatingRho.r")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
1e7 * 19.04135 / 1e3
source("EstimatingRho.r")
source("EstimatingRho.r")
rec.age
source("SimulatePopDynamic.R")
source("EstimatingRho.r")
(nls.model <- nls( y ~ vbgf( x, a, b,c), data = data.frame(x = seq(rec.age,max.age), y = average.weight.at.age[seq(rec.age, max.age)]),
start = list(a = 50, b = 0.3, c= 1)))
start = list(a = 50, b = 0.7, c= 1)))
start = list(a = 50, b = 0.7, c= 1))
(nls.model <- nls( y ~ vbgf( x, a, b,c), data = data.frame(x = seq(rec.age,max.age), y = average.weight.at.age[seq(rec.age, max.age)]),
start = list(a = 50, b = 0.7, c= 1)))
(nls.model <- nls( y ~ vbgf( x, a, b,c), data = data.frame(x = seq(rec.age,max.age), y = average.weight.at.age[seq(rec.age, max.age)]),
start = list(a = 50, b = 0.3, c= 1)))
(nls.model <- nls( y ~ vbgf( x, a, b,c), data = data.frame(x = seq(rec.age,max.age), y = average.weight.at.age[seq(rec.age, max.age)]),
start = list(a = 50, b = 0.1, c= 1)))
source("EstimatingRho.r")
source("EstimatingRho.r")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
dimnames(Weight.at.age) <- list(apply(expand.grid(intra.year.timesteps, years),1, paste, collapse = "."), nb.age.groups)
expand.grid(intra.year.timesteps, years)
dimnames(Weight.at.age) <- list(apply(expand.grid(intra.year.timesteps, years),1, paste, collapse = "."), nb.age.groups)
nb.age.groups
dimnames(Weight.at.age)
list(apply(expand.grid(intra.year.timesteps, years),1, paste, collapse = "."), nb.age.groups)
list(apply(expand.grid(intra.year.timesteps, years),1, paste, collapse = "."), nb.age.groups)
 weight.at.age
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
average.weight.at.age
weight.at.age
source("CompareOutcome.R")
source("CompareOutcome.R")
source("EstimatingRho.r")
source("EstimatingRho.r")
source("EstimatingRho.r")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("CompareOutcome.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
?dev.print
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
est.quantities$EstimatedBiomass
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
read.csv("Results/SimPar.txt", head = FALSE)
fixpar <- read.table("FixParameters.txt")
fixpar
fixpar[5]
fixpar$V1[5]
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
system("cat FixParameters.txt")
source("PlotTheC++Results.R")
source("SimulatePopDynamic.R")
dim(Nb.at.age)
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
source("SimulatePopDynamic.R")
average.weight.at.age <- rowMeans(weight.at.age)
print(average.weight.at.age)
# Plot weight at age
plot(seq(1,max.age.group), weight.at.age$Female, pch = "F", xlab = "Time (months)", ylab = "Weight (g)", las = 1)
points( seq(1,max.age.group), weight.at.age$Male, pch = "M")
points(seq(1,max.age.group), average.weight.at.age, pch = 19)
# Estimate Ford-Walford parameters using the whole range of ages ?
# NOTE that Ford-Walford graphs are used for length data ( see Ricker, 1958, Eq. 9.8)
(lm1 <- lm(y~x, data = data.frame(x = average.weight.at.age[seq(1, 29)], y = average.weight.at.age[seq(2, 30)])));
plot(average.weight.at.age[seq(1, max.age.group-1)], y = average.weight.at.age[seq(2, max.age.group)],
xlab = "Average weight at month t", ylab = "Average weight at month t+1", xlim = c(0,80), ylim = c(0,80), las = 1)
abline(0,1)
abline(lm1, col = "blue");
# What are the parameter of this linear relationship applied for age >= recruitment?
rec.age <- 5 # here the age at recruitment is chosen so that size at recruitment ~= 7.7 grams
(lm2 <- lm(y~x, data = data.frame(x = average.weight.at.age[seq(rec.age, max.age.group-1)], y = average.weight.at.age[seq(rec.age+1, max.age.group)])));
abline(lm2, col = "green");
# Schnute's growth model (Eq. 1.14)
ssq.Eq114.TigerPrawn <- function(par){ sum((average.weight.at.age[seq(rec.age, max.age.group)] - Eq114(par, seq(rec.age, max.age.group), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn <- optim(c(1, 1, 0.5), ssq.Eq114.TigerPrawn))
# NOTE: you end-up with an estimate of the weight at recruitment which is quite differenct that average.weight.at.age[rec.age] NOT GOOD !
# Let's fit Schnute fixing weight at recruitment
Eq114.bis <- function(par, x, k) {par[1] + (average.weight.at.age[rec.age] - par[1]) * (1-par[2]^(1+x-k))/(1-par[2])}
ssq.Eq114.TigerPrawn.2par <- function(par){ sum((average.weight.at.age[seq(rec.age, max.age.group)] - Eq114.bis(par, seq(rec.age, max.age.group), k = rec.age))^2)}
(Schnute.results.for.TigerPrawn.2par <- optim(c(1, 0.5), ssq.Eq114.TigerPrawn.2par))
# Let's fit Schnute fixing weight at recruitment and fixing rho
Eq114.tris <- function(par, x, k, rho) {par[1] + (average.weight.at.age[rec.age] - par[1]) * (1-rho^(1+x-k))/(1-rho)}
ssq.Eq114.TigerPrawn.1par <- function(par){ sum((average.weight.at.age[seq(rec.age, max.age.group)] - Eq114.tris(par, seq(rec.age, max.age.group), k = rec.age, rho = exp(-0.1794067)))^2)}
(Schnute.results.for.TigerPrawn.1par <- optimize(ssq.Eq114.TigerPrawn.1par,lower = -10, upper = 1e3))
# Von Bertalanffy growth function for weight
vbgf <- function(t, Linf, k, t0=0) 0.5*(a.m + a.f) * (Linf * (1-exp(-k * (t -t0))))^(0.5 * (b.m+b.f))
# Estimate parameters
(nls.model <- nls( y ~ vbgf( x, a, b,c), data = data.frame(x = seq(rec.age,max.age.group), y = average.weight.at.age[seq(rec.age, max.age.group)]),
start = list(a = 50, b = 0.03, c= 1)))
(nls.model <- nls( y ~ vbgf( x, a, b,c), data = data.frame(x = seq(rec.age,max.age.group), y = average.weight.at.age[seq(rec.age, max.age.group)]),
start = list(a = 50, b = 0.2, c= 1)))
source("EstimatingRho.r")
source("SimulatePopDynamic.R")
dim(Weight.at.age)
Weight.at.age
dim(Weight.at.age)
source("SimulatePopDynamic.R")
dim(Nb.at.age)
dim(Weight.at.age)
dim(prop.spawners)
SSB <- tapply(rowSums(Nb.at.age * 1e-3 * Weight.at.age * prop.spawners * 0.5), rep(years, each = 12), sum)
source("SimulatePopDynamic.R")
noisy.Catch <- Catch * matrix( runif(length(years) * length(intra.year.timesteps) * length(nb.age.groups), min = 0.9, max = 1.1), nrow = length(years) * length(intra.year.timesteps), ncol = length(nb.age.groups))
noisy.Effort <- Effort * matrix( runif(length(years) * length(intra.year.timesteps) * length(nb.age.groups), min = 0.9, max = 1.1), nrow = length(years) * length(intra.year.timesteps), ncol = length(nb.age.groups))
write.csv( file = "Data/SimulatedCPUE.csv", rowSums(noisy.Catch)[-seq(1, 2 * length(intra.year.timesteps))] / noisy.Effort[-seq(1,2 * length(intra.year.timesteps)), 1])
write.csv( file = "Data/SimulatedEffort.csv", Effort[-seq(1, 2 * length(intra.year.timesteps)), 1])
write.csv( file = "Data/SimulatedCatch.csv", rowSums(Catch)[-seq(1, 2 * length(intra.year.timesteps))])
write.csv( file = "Data/SimulatedBiomass.csv", rowSums(Biomass))
write.csv( file = "Data/SimulatedFebruaryRecruitmentSurvey.csv", Recruitment[seq(2, length(years) * 12,12),1] * runif( length(seq(2, length(years) * 12,12)), min = 0.8, max = 1.2))
write.table(file = "Data/SimData3.txt", cbind(seq(1, 9*52), rowSums(noisy.Catch)[seq(53, 10*52)], Effort[seq(53, 10*52),1], 0), row.names = FALSE, col.names = FALSE)
# last 4 years
write.table(file = "Data/SimData4.txt", data.frame(seq(1, 4*52), "SimYear", rep(years, each = length(intra.year.timesteps))[seq(length(rowSums(noisy.Catch)) - 4*52 + 1, length(rowSums(noisy.Catch)))], rep(1:52, 4), rowSums(noisy.Catch)[seq(length(rowSums(noisy.Catch)) - 4*52 + 1, length(rowSums(noisy.Catch)))], Effort[seq(length(rowSums(noisy.Catch)) - 4*52 + 1, length(rowSums(noisy.Catch))),1], 0), row.names = FALSE, col.names = FALSE, quote = FALSE)
write.table(file = "Data/SimData4bis.txt", cbind(seq(1, 4*52), rowSums(Catch)[seq(length(rowSums(Catch)) - 4*52 + 1, length(rowSums(Catch)))], Effort[seq(length(rowSums(Catch)) - 4*52 + 1, length(rowSums(Catch))),1], 0), row.names = FALSE, col.names = FALSE)
# last 23 years
write.table(file = "Data/SimData5.txt", cbind(seq(1, 23*52), rowSums(noisy.Catch)[seq(length(rowSums(noisy.Catch)) - 23*52 + 1, length(rowSums(noisy.Catch)))], Effort[seq(length(rowSums(noisy.Catch)) - 23*52 + 1, length(rowSums(noisy.Catch))),1], 0), row.names = FALSE, col.names = FALSE)
write.table(file = "Data/SimData6.txt", cbind(seq(1, 23*52), rowSums(Catch)[seq(length(rowSums(Catch)) - 23*52 + 1, length(rowSums(Catch)))], Effort[seq(length(rowSums(Catch)) - 23*52 + 1, length(rowSums(Catch))),1],0), row.names = FALSE, col.names = FALSE)
source("SimulatePopDynamic.R")
getwd()
q()
source("PlotTheC++Results.R")
q()
# cases where MINUIT converged to boundaries or stopped prematuraly
#failed.minimization <- c(1,28,31,47,52,55,58,61,70,82,83,85,88,90,91)
failed.minimization <- c()
sim.results <- data.frame(matrix(ncol = 15, nrow = nb.sim))
dimnames(sim.results)[[2]] <- list("Sim.targeted.q", "Est.targeted.q", "sd.Est.targeted.q", 
      "Sim.vm.mean", "Est.vm.mean", "sd.Est.vm.mean", 
      "Sim.vm.sigma", "Est.vm.sigma", "sd.Est.vm.sigma",
                              "Sim.B1", "Est.B1", "sd.Est.B1",
      "Sim.B2", "Est.B2", "sd.Est.B2")
for(i in setdiff(1:nb.sim, failed.minimization)){
sim.data <- read.table(paste("Results/", i, "/SimData4.txt", sep = ""))
#sim.par <- read.table(paste("Results/", i, "/SimPar.txt", sep = ""))
sim.par <- read.csv(paste("Results/", i, "/SimPar.txt", sep = ""), head = FALSE)
sim.results$Sim.targeted.q[i] <- sim.par$V2[1]
sim.results$Sim.vm.mean[i] <- sim.par$V2[2]
sim.results$Sim.vm.sigma[i] <- sim.par$V2[3]
par.est <- read.csv(paste("Results/", i, "/ParameterEstimates.txt", sep = ""), header = FALSE)
sim.results$Est.targeted.q[i] <- par.est$V2[1]
sim.results$sd.Est.targeted.q[i] <- par.est$V3[1]
sim.results$Est.vm.mean[i] <- par.est$V2[6]
sim.results$sd.Est.vm.mean[i] <- par.est$V3[6]
sim.results$Est.vm.sigma[i] <- par.est$V2[7]
sim.results$sd.Est.vm.sigma[i] <- par.est$V3[7]
##### Biomass
print(i)
sim.biomass <- read.csv(paste("Results/", i, "/SimulatedBiomass.csv", sep = ""), header = TRUE)
sim.results$Sim.B1[i] <- sim.biomass[seq(nrow(sim.biomass) - 4*12 + 1, nrow(sim.biomass) - 4*12 + 2),"x"][1]
sim.results$Est.B1[i] <- par.est$V2[4] * 1e5
sim.results$sd.Est.B1[i] <- par.est$V3[4] * 1e5
sim.results$Sim.B2[i] <- sim.biomass[seq(nrow(sim.biomass) - 4*12 + 1, nrow(sim.biomass) - 4*12 + 2),"x"][2]
sim.results$Est.B2[i] <- par.est$V2[5] * 1e5
sim.results$sd.Est.B2[i] <- par.est$V3[5] * 1e5
}
i
sim.data <- read.table(paste("Results/", i, "/SimData4.txt", sep = ""))
sim.data
sim.par <- read.csv(paste("Results/", i, "/SimPar.txt", sep = ""), head = FALSE)
sim.par
source("SimulatePopDynamic.R")
q()
source("SimulatePopDynamic.R")
source("PlotTheC++Results.R")
q()
source("PlotTheC++Results.R")
q()
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
source("PlotTheC++Results.R")
